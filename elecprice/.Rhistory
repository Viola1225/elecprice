library(shiny)
library(dplyr)
library(ggvis)
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(dplyr)
library(ggvis)
source("D:\\user\\01378037\\docum\\GitHub\\elecprice.R")
#get base-df
df_base<-get_df()
source("D:\\user\\01378037\\docum\\GitHub\\elecprice.R")
source("D:\\user\\01378037\\docum\\GitHub\\elecprice\\datascrape.R")
#get base-df
df_base<-get_df()
sprintf(c("Name:%s", "Age: %s"), c("Kingsley", "30"))
sprintf(" s", month.name)
sprintf("%-9s", month.name)
sprintf("% s", month.name)
View(df_base)
?downloadHandler
?renderDataTable
?ggvis
?hr()
?[]
?[
?[[]]
?selectInput
a=df_base$tdu
runApp()
#load libraries
library(shiny)
library(dplyr)
library(ggvis)
source("D:\\user\\01378037\\docum\\GitHub\\elecprice\\datascrape.R")
#get base-df
df_base<-get_df()
#ui.R vars
choices<-list(tdus=unique(df_base$TDU),
reps=unique(df_base$REP),
rate_types=unique(df_base$RATE_TYPE),
booleans=c(TRUE,FALSE),
usage=c("KWH500","KWH1000","KWH2000")
)
#server.R vars & functions
#------------------------
#histogram_tooltip helper function
histogram_tootip=function(data){
if(is.null(data)) return(NULL)
sprintf("price: %s - %s c/kwh<br />
Count: %s<br />",
round(data$xmin,1), round(data$xmax,1),
data$stack_upr - data$stack_lwr)
}
#color map
REP_COLOR_MAP<-c(
"REP1" = "#1f77b4",
"REP2" = "#ff7f0e",
"REP3" = "#2ca02c",
"OTHER" = "#dddddd"
)
runApp()
runApp()
runApp()
#clean function
clean<-function(df){
# clean raw data
# rename columns and define types, select columns
# @return: cleaned dataframe with some columns kept
columns<-c("ID",
"TDU",
"REP",
"PRODUCT",
"KWH500",
"KWH1000",
"KWH2000",
"FEES",
"PREPAID",
"TOU",
"FIXED",
"RATE_TYPE",
"RENEWABLE",
"TERM_LENGTH",
"CANCEL_FEE",
"WEBSITE",
"TERMS",
"TERMS_URL",
"PROMOTION",
"PROMOTION_DESC",
"FACTS_URL",
"ENROLL_URL",
"PREPAID_URL",
"ENROLL_PHONE",
"NEW_CUST",
"MIN_USAGE_FEE",
"LANGUAGE",
"RATING")
colnames(df)=columns
df=df %>% #mutate
select("ID",
"TDU",
"REP",
"PRODUCT",
"KWH500",
"KWH1000",
"KWH2000",
"RATE_TYPE",
"RENEWABLE",
"TERM_LENGTH",
"PREPAID",
"TOU",
"PROMOTION",
"FACTS_URL") %>%
mutate(KWH500=KWH500*100,
KWH1000=KWH1000*100,
KWH2000=KWH2000*100,
PREPAID=as.logical(PREPAID),
TOU=as.logical(TOU),
PROMOTION=as.logical(PROMOTION))
df=na.omit(df)
return(df)
}
# get_df<-function(){
#   url<-"http://www.powertochoose.org/en-us/Plan/ExportToCsv"
#   df<-read.csv(file = url,header = TRUE,stringsAsFactors = FALSE)
#   df<-clean(df)
# }
get_df<-function(){
df<-read.csv(file = "D:\\user\\01378037\\docum\\GitHub\\elecprice\\power-to-choose-offers.csv",header = TRUE,stringsAsFactors = FALSE)
df<-clean(df)
}
runApp()
a=data.frame(1:10)
b=a[,2]
b=df_base[,input$usage]
?fill
??fill
runApp()
?add_tooltip
?histogram_tooltip
??histogram_tooltip
runApp()
runApp()
runApp()
runApp()
#load libraries
library(shiny)
library(dplyr)
library(ggvis)
source("D:\\user\\01378037\\docum\\GitHub\\elecprice\\datascrape.R")
#get base-df
df_base<-get_df()
#ui.R vars
choices<-list(tdus=unique(df_base$TDU),
reps=unique(df_base$REP),
rate_types=unique(df_base$RATE_TYPE),
booleans=c(TRUE,FALSE),
usage=c("KWH500","KWH1000","KWH2000")
)
#server.R vars & functions
#------------------------
#histogram_tooltip helper function
histogram_tootip=function(data){
if(is.null(data)) return(NULL)
sprintf("price: %s - %s c/kwh<br />
Count: %s<br />",
round(data$xmin,1), round(data$xmax,1),
data$stack_upr - data$stack_lwr)
}
#color map
REP_COLOR_MAP<-c(
"REP1" = "#1f77b4",
"REP2" = "#ff7f0e",
"REP3" = "#2ca02c",
"OTHER" = "#dddddd"
)
runApp()
runApp()
runApp()
#clean function
clean<-function(df){
# clean raw data
# rename columns and define types, select columns
# @return: cleaned dataframe with some columns kept
columns<-c("ID",
"TDU",
"REP",
"PRODUCT",
"KWH500",
"KWH1000",
"KWH2000",
"FEES",
"PREPAID",
"TOU",
"FIXED",
"RATE_TYPE",
"RENEWABLE",
"TERM_LENGTH",
"CANCEL_FEE",
"WEBSITE",
"TERMS",
"TERMS_URL",
"PROMOTION",
"PROMOTION_DESC",
"FACTS_URL",
"ENROLL_URL",
"PREPAID_URL",
"ENROLL_PHONE",
"NEW_CUST",
"MIN_USAGE_FEE",
"LANGUAGE",
"RATING")
colnames(df)=columns
df=df %>% #mutate
select("ID",
"TDU",
"REP",
"PRODUCT",
"KWH500",
"KWH1000",
"KWH2000",
"RATE_TYPE",
"RENEWABLE",
"TERM_LENGTH",
"PREPAID",
"TOU",
"PROMOTION",
"FACTS_URL") %>%
mutate(KWH500=KWH500*100,
KWH1000=KWH1000*100,
KWH2000=KWH2000*100,
PREPAID=as.logical(PREPAID),
TOU=as.logical(TOU),
PROMOTION=as.logical(PROMOTION))
df=na.omit(df)
return(df)
}
# get_df<-function(){
#   url<-"http://www.powertochoose.org/en-us/Plan/ExportToCsv"
#   df<-read.csv(file = url,header = TRUE,stringsAsFactors = FALSE)
#   df<-clean(df)
# }
get_df<-function(){
df<-read.csv(file = "D:\\user\\01378037\\docum\\GitHub\\elecprice\\power-to-choose-offers.csv",header = TRUE,stringsAsFactors = FALSE)
df<-clean(df)
}
#load libraries
library(shiny)
library(dplyr)
library(ggvis)
source("D:\\user\\01378037\\docum\\GitHub\\elecprice\\datascrape.R")
#get base-df
df_base<-get_df()
#ui.R vars
choices<-list(tdus=unique(df_base$TDU),
reps=unique(df_base$REP),
rate_types=unique(df_base$RATE_TYPE),
booleans=c(TRUE,FALSE),
usage=c("KWH500","KWH1000","KWH2000")
)
#server.R vars & functions
#------------------------
#histogram_tooltip helper function
histogram_tootip=function(data){
if(is.null(data)) return(NULL)
sprintf("price: %s - %s c/kwh<br />
Count: %s<br />",
round(data$xmin,1), round(data$xmax,1),
data$stack_upr - data$stack_lwr)
}
#color map
REP_COLOR_MAP<-c(
"REP1" = "#1f77b4",
"REP2" = "#ff7f0e",
"REP3" = "#2ca02c",
"OTHER" = "#dddddd"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#clean function
clean<-function(df){
# clean raw data
# rename columns and define types, select columns
# @return: cleaned dataframe with some columns kept
columns<-c("ID",
"TDU",
"REP",
"PRODUCT",
"KWH500",
"KWH1000",
"KWH2000",
"FEES",
"PREPAID",
"TOU",
"FIXED",
"RATE_TYPE",
"RENEWABLE",
"TERM_LENGTH",
"CANCEL_FEE",
"WEBSITE",
"TERMS",
"TERMS_URL",
"PROMOTION",
"PROMOTION_DESC",
"FACTS_URL",
"ENROLL_URL",
"PREPAID_URL",
"ENROLL_PHONE",
"NEW_CUST",
"MIN_USAGE_FEE",
"LANGUAGE",
"RATING")
colnames(df)=columns
df=df %>% #mutate
select("ID",
"TDU",
"REP",
"PRODUCT",
"KWH500",
"KWH1000",
"KWH2000",
"RATE_TYPE",
"RENEWABLE",
"TERM_LENGTH",
"PREPAID",
"TOU",
"PROMOTION",
"FACTS_URL") %>%
mutate(KWH500=KWH500*100,
KWH1000=KWH1000*100,
KWH2000=KWH2000*100,
PREPAID=as.logical(PREPAID),
TOU=as.logical(TOU),
PROMOTION=as.logical(PROMOTION))
df=na.omit(df)
return(df)
}
# get_df<-function(){
#   url<-"http://www.powertochoose.org/en-us/Plan/ExportToCsv"
#   df<-read.csv(file = url,header = TRUE,stringsAsFactors = FALSE)
#   df<-clean(df)
# }
get_df<-function(){
df<-read.csv(file = "D:\\user\\01378037\\docum\\GitHub\\elecprice\\power-to-choose-offers.csv",header = TRUE,stringsAsFactors = FALSE)
df<-clean(df)
}
#load libraries
library(shiny)
library(dplyr)
library(ggvis)
source("D:\\user\\01378037\\docum\\GitHub\\elecprice\\datascrape.R")
#get base-df
df_base<-get_df()
#ui.R vars
choices<-list(tdus=unique(df_base$TDU),
reps=unique(df_base$REP),
rate_types=unique(df_base$RATE_TYPE),
booleans=c(TRUE,FALSE),
usage=c("KWH500","KWH1000","KWH2000")
)
#server.R vars & functions
#------------------------
#histogram_tooltip helper function
histogram_tootip=function(data){
if(is.null(data)) return(NULL)
sprintf("price: %s - %s c/kwh<br />
Count: %s<br />",
round(data$xmin,1), round(data$xmax,1),
data$stack_upr - data$stack_lwr)
}
#color map
REP_COLOR_MAP<-c(
"REP1" = "#1f77b4",
"REP2" = "#ff7f0e",
"REP3" = "#2ca02c",
"OTHER" = "#dddddd"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(df_base)
runApp()
runApp()
runApp(appDir = getwd(), port = getOption("shiny.port"),
launch.browser = getOption("shiny.launch.browser", interactive()),
host = getOption("shiny.host", "127.0.0.1"), workerId = "",
quiet = FALSE, display.mode = c("auto", "normal", "showcase"),
test.mode = getOption("shiny.testmode", FALSE))
runApp(host = getOption("shiny.host", "127.0.0.1"))
runApp(host=getOption("shiny.host", "127.0.0.1"))
runApp(host=getOption("shiny.host", "10.118.12.86"))
runApp(host = getOption("shiny.host", "127.0.0.1"))
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='viola-251296',
token='A889F4E0593CBC62FC9ECB17CD7E04F2',
secret='1Ti2DA1mUYeB2U5XIiS+PVn5b301to/2Lp5mFi2y')
runApp()
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='viola-251296',
token='A889F4E0593CBC62FC9ECB17CD7E04F2',
secret='<SECRET>')
rsconnect::setAccountInfo(name='viola-251296',
token='A889F4E0593CBC62FC9ECB17CD7E04F2',
secret='1Ti2DA1mUYeB2U5XIiS+PVn5b301to/2Lp5mFi2y')
deployApp()
rsconnect::deployApp()
install.packages(rsconnect)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='viola-251296', token='A889F4E0593CBC62FC9ECB17CD7E04F2', secret='1Ti2DA1mUYeB2U5XIiS+PVn5b301to/2Lp5mFi2y')
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='ricarvy', token='C8C9EBFA13D6294CC313B7C1513538D4', secret='+XIf33yNm+27Py4BPs1s8juEzZIKo5Bzk+R+4TUW')
deployApp()
rsconnect::deployApp('D:\\user\\01378037\\docum\\GitHub\\elecprice')
shiny::runApp()
rsconnect::setAccountInfo(name='viola-251296',
token='A889F4E0593CBC62FC9ECB17CD7E04F2',
secret='1Ti2DA1mUYeB2U5XIiS+PVn5b301to/2Lp5mFi2y')
deployApp()
?deployApp
rsconnect::setAccountInfo(name='viola-251296',
token='A889F4E0593CBC62FC9ECB17CD7E04F2',
secret='1Ti2DA1mUYeB2U5XIiS+PVn5b301to/2Lp5mFi2y')\
rsconnect::setAccountInfo(name='viola-251296',
token='A889F4E0593CBC62FC9ECB17CD7E04F2',
secret='1Ti2DA1mUYeB2U5XIiS+PVn5b301to/2Lp5mFi2y')
deployApp()
deployApp(account = viola-251296)
deployApp(account = "viola-251296")
